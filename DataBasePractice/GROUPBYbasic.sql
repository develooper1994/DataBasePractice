-- Officially I am entering the "data analisis" world.
USE ETRADE2

SELECT *
FROM SALES

select COUNT(BRAND), BRAND from SALES
group by BRAND
ORDER BY BRAND;

select COUNT(CUSTOMERGENDER), CUSTOMERGENDER from SALES
group by CUSTOMERGENDER
ORDER BY CUSTOMERGENDER;

select COUNT(BRAND) AS NumberOfBrand, BRAND, CUSTOMERGENDER from SALES
group by BRAND, CUSTOMERGENDER
ORDER BY BRAND, CUSTOMERGENDER;

-- MAXIMUM GAIN by city
SELECT 
CITY, 
SUM(TOTALPRICE) AS SUMPRICE
FROM SALES
GROUP BY CITY
ORDER BY SUMPRICE DESC

-- MAXIMUM GAIN by city. with much more info
SELECT 
CITY,
MIN(TOTALPRICE) AS MINPRICE,
MAX(TOTALPRICE) AS MAXPRICE,
COUNT(FICHENO) AS ROWCOUNT_,
SUM(TOTALPRICE) AS SUMPRICE,
AVG(TOTALPRICE) AS AVGPRICE
FROM SALES
GROUP BY CITY
ORDER BY SUMPRICE DESC, CITY

-- MAXIMUM GAIN by city and date 
SELECT CITY, CONVERT(date, DATE_) AS DATE2, SUM(TOTALPRICE) AS SUMPRICE
FROM SALES
-- WHERE CITY='ANKARA'
GROUP BY CITY, CONVERT(date, DATE_)
ORDER BY SUMPRICE DESC, DATE2

-- Sales volume of stores by days
SELECT CONVERT(date, DATE_) AS DATE2, CITY, SUM(TOTALPRICE) AS SUMPRICE
FROM SALES
WHERE CONVERT(date, DATE_)='2019-01-02'
GROUP BY CITY, CONVERT(date, DATE_)
ORDER BY DATE2, SUMPRICE DESC

-- Sales volume of stores by months
SELECT MONTH(DATE_) AS DATEmonth, SUM(TOTALPRICE) AS SUMPRICE, CITY
FROM SALES
WHERE DATEPART(MONTH, DATE_)=1
GROUP BY CITY, DATEPART(MONTH, DATE_)
ORDER BY DATEmonth, SUMPRICE DESC, CITY

-- Sales volume of stores by categories
SELECT CATEGORY1,
SUM(TOTALPRICE) AS SUMPRICE, COUNT(*) ROWCOUNT_, SUM(AMOUNT) AS TOTALAMOUNT
FROM SALES
GROUP BY CATEGORY1
ORDER BY CATEGORY1

SELECT CATEGORY1, CATEGORY2,
SUM(TOTALPRICE) AS SUMPRICE, COUNT(*) ROWCOUNT_, SUM(AMOUNT) AS TOTALAMOUNT
FROM SALES
GROUP BY CATEGORY1, CATEGORY2
ORDER BY CATEGORY1, CATEGORY2

SELECT CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4,
SUM(TOTALPRICE) AS SUMPRICE, COUNT(*) ROWCOUNT_, SUM(AMOUNT) AS TOTALAMOUNT
FROM SALES
GROUP BY CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4
ORDER BY CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4

SELECT CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4,
(SUM(TOTALPRICE)/SUM(AMOUNT)) AS PROFIT, SUM(TOTALPRICE) AS SUMPRICE, COUNT(*) ROWCOUNT_, SUM(AMOUNT) AS TOTALAMOUNT
FROM SALES
GROUP BY CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4
ORDER BY PROFIT DESC, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4



-- The number of unique customers of the STORES
SELECT 
CITY, 
COUNT(DISTINCT CUSTOMERNAME) UNIQUECUSTOMER,
COUNT(DISTINCT FICHENO) CUSTOMERCOUNT, 
COUNT(*) ITEMCOUNT
FROM SALES
WHERE DATEPART(MONTH, DATE_)=1
GROUP BY CITY
ORDER BY CITY

SELECT DATEPART(MONTH, DATE_) AS DATEmonth, SUM(TOTALPRICE) AS SUMPRICE, CITY
FROM SALES
--WHERE DATEPART(MONTH, DATE_)=1
GROUP BY CITY, DATEPART(MONTH, DATE_)
ORDER BY DATEmonth, SUMPRICE DESC, CITY


-- Get stores that earned more than or equal to a certain amount.
SELECT CITY, SUM(TOTALPRICE) AS SUMPRICE
FROM SALES
--WHERE SUM(TOTALPRICE)>40000  -- it can't be used with aggregation functions, go with having.
GROUP BY CITY
HAVING SUM(TOTALPRICE)>40000  -- 
ORDER BY SUMPRICE DESC

-- WRONG!!! IT COMPARES ALL THE VALUES IN THE COLOUMN
--SELECT * FROM SALES WHERE TOTALPRICE>40000

-- Get stores that earned more than or equal to a certain amount. 
-- Also;;; The number of customers of the STORES
SELECT CITY, SUM(TOTALPRICE) AS SUMPRICE,
COUNT(DISTINCT FICHENO) CUSTOMERCOUNT
FROM SALES

GROUP BY CITY
HAVING
COUNT(DISTINCT FICHENO)> 300
AND
SUM(TOTALPRICE)>100000
ORDER BY SUMPRICE DESC